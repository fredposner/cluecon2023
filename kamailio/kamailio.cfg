#!KAMAILIO

##--
##-- Kamailio configuration for ClueCon 2023.
##-- Fred Posner / https://qxork.com
##--

##-- Defined Values
#	define WITH_DEBUG
#	define WITH_TLS
#   define WITH_TOPOS
#   define WITH_SIPDUMP
#   define WITH_APIBAN
#   define WITH_PUBLICIP
#!define WITH_IPTABLESAPI

## Replacements and definitions
apiban.key = "" desc "APIBAN api key"
#!substdef "/EXTERNALIP/?.?.?.?/"
#!substdef "/INTERNALIP/192.168.25.86/"
#!substdef "/CARRIERIP/192.168.25.61/"
#!substdef "/SIPDOMAIN/cluecon2023.pgpx.io/"
#!substdef "/DBURL/mysql:\/\/kamailio:kamailiorw@localhost\/kamailio/"
#!substdef "/FREESWITCHIP/192.168.25.87/"

## Core config parameters.
#!ifdef WITH_DEBUG
debug=4
log_stderror=yes
#!else
debug=2
log_stderror=no
#!endif

dns=no
dns_cache_init=off
dns_srv_lb=no
dns_try_naptr=no
fork=yes
log_facility=LOG_LOCAL0
log_stderror=no
log_prefix="{$ci $mt $hdr(CSeq)} "
maxbuffer=65536
rev_dns=no
use_dns_cache=no
children=8
max_while_loops=250
auto_aliases=no

disable_tcp=no
tcp_connection_lifetime=3605
tcp_accept_no_cl=yes

#!ifdef WITH_TLS
#-- TCP parameters
tcp_children = 4
tcp_max_connections = 4096
tcp_connect_timeout = 10
tcp_keepalive = yes
tcp_keepcnt = 3
tcp_keepidle = 30
tcp_keepintvl = 10
tcp_send_timeout = 10
enable_tls=yes
#!endif

#!ifdef WITH_PUBLICIP
listen=udp:INTERNALIP:5060 advertise EXTERNALIP:5060 name "publicsock"
#!else
listen=udp:INTERNALIP:5060 name "publicsock"
#!endif
listen=udp:INTERNALIP:5080 name "lansock" #-- For Internal Traffic
listen=tcp:INTERNALIP:80 name "httpsock"
listen=tcp:127.0.0.1:80 name "internalhttp"
#!ifdef WITH_PUBLICIP
alias="EXTERNALIP"
#!endif
alias="SIPDOMAIN"

#!ifdef WITH_TLS
#!ifdef WITH_PUBLICIP
listen=tls:INTERNALNAT:5061 advertise EXTERNALIP:5061  name "pubtlssock" #-- TLS Socket
alias="EXTERNALIP:5061"
#!else
listen=tls:INTERNALNAT:5061 advertise EXTERNALIP:5061 name "pubtlssock"#-- TLS Socket
#!endif
alias="SIPDOMAIN:5061"
#!endif

mhomed=0
port=5060
force_rport=yes
xavp_via_params = "via"

# Modules Section
loadmodule "jsonrpcs.so"
loadmodule "kex.so"
loadmodule "corex.so"
loadmodule "tm.so"
loadmodule "tmx.so"
loadmodule "sl.so"
loadmodule "rr.so"
loadmodule "pv.so"
loadmodule "maxfwd.so"
loadmodule "textops.so"
loadmodule "siputils.so"
loadmodule "xlog.so"
loadmodule "sanity.so"
loadmodule "ctl.so"
loadmodule "cfg_rpc.so"
loadmodule "htable.so"
loadmodule "pike.so"
loadmodule "rtimer.so"
loadmodule "ipops.so"
loadmodule "sdpops.so"
loadmodule "jansson.so"
loadmodule "nathelper.so"
loadmodule "xhttp.so"

#!ifexp WITH_APIBAN || WITH_IPTABLESAPI
loadmodule "http_client.so"
#!endif

#!ifdef WITH_IPTABLESAPI
loadmodule "http_async_client.so"
#!endif

#!ifdef WITH_TLS
loadmodule "tls.so"
#!endif

#!ifdef WITH_DEBUG
loadmodule "debugger.so"
#!endif

#!ifdef WITH_TOPOS
loadmodule "db_mysql.so"
loadmodule "topos.so"
#!endif

#!ifdef WITH_SIPDUMP
loadmodule "sipdump.so"
loadmodule "exec.so"
#!endif

# setting module-specific parameters
#!ifdef WITH_DEBUG
modparam("debugger", "cfgtrace", 1)
#!endif

#!ifexp WITH_APIBAN || WITH_IPTABLESAPI
modparam("http_client", "httpredirect", 0)
modparam("http_client", "connection_timeout", 4)
modparam("http_client", "verify_peer", 0)
modparam("http_client", "verify_host", 0)
modparam("http_client", "keep_connections", 1)
#!endif

#!ifdef WITH_IPTABLESAPI
modparam("http_async_client", "curl_follow_redirect", 0)
modparam("http_async_client", "connection_timeout", 4000)
modparam("http_async_client", "tls_verify_peer", 0)
modparam("http_async_client", "tls_verify_host", 0)
#!endif

modparam("htable", "htable", "admin=>size=3;initval=0;")
modparam("htable", "htable", "allowedip=>size=8;")
#!ifdef WITH_APIBAN
modparam("htable", "htable", "apiban=>size=11;autoexpire=604800;")
modparam("htable", "htable", "apibanctl=>size=1;initval=0;")
#!endif
modparam("htable", "htable", "cps=>size=14;autoexpire=10;")
modparam("htable", "htable", "ipban=>size=8;autoexpire=10800;")
modparam("htable", "htable", "report=>size=5;initval=0;")
modparam("htable", "htable", "stats=>size=5;initval=0;autoexpire=120;updateexpire=0;")

modparam("jsonrpcs", "pretty_format", 1)
modparam("jsonrpcs", "transport", 1)

modparam("pike", "sampling_time_unit", 2)
modparam("pike", "reqs_density_per_unit", 48)
modparam("pike", "remove_latency", 4)

modparam("nathelper", "received_avp", "$avp(RECEIVED)")

modparam("rr", "enable_full_lr", 1)
modparam("rr", "append_fromtag", 1)
modparam("rr", "ignore_sips", 1)
modparam("rr", "enable_double_rr", 2)

modparam("rtimer", "timer", "name=tst;interval=60;mode=1;")
modparam("rtimer", "exec", "timer=tst;route=CPS_STATS")
#!ifdef WITH_APIBAN
modparam("rtimer", "timer", "name=apiban;interval=300;mode=1;")
modparam("rtimer", "exec", "timer=apiban;route=APIBAN")
#!endif
#!ifdef WITH_SIPDUMP
modparam("rtimer", "timer", "name=tjobs;interval=300;mode=1;")
modparam("rtimer", "exec", "timer=tjobs;route=TCLEAN")
#!endif

#!ifdef WITH_TLS
modparam("tls", "tls_method", "SSLv23")
modparam("tls", "verify_certificate", 0)
modparam("tls", "require_certificate", 0)
modparam("tls", "certificate", "/usr/local/etc/kamailio/kamailio1_cert.pem")
modparam("tls", "private_key", "/usr/local/etc/kamailio/privkey.pem")
#!endif

modparam("tm", "failure_reply_mode", 3)
modparam("tm", "fr_timer", 4000)
modparam("tm", "fr_inv_timer", 75000)

#!ifdef WITH_TOPOS
modparam("topos", "db_url", "DBURL")
#!endif

modparam("xlog", "prefix", "")

#!ifdef WITH_SIPDUMP
modparam("sipdump", "mode", 4)
modparam("sipdump", "enable", 1)
#!endif

##-- Routing Logic
request_route {
	xdbg("[R-MAIN] $rm via $si dd: $dd nh: $nh(d) fd: $fd td: $td\n");

	#-- per request initial checks
	route(REQINIT);

	#-- NAT detection
	route(NATDETECT);

	#-- CANCEL processing
	if (is_method("CANCEL")) {
		if (t_check_trans()) {
			route(RELAY);
		}

		exit;
	}

	#-- handle retransmissions
	if (!is_method("ACK")) {
		if(t_precheck_trans()) {
			t_check_trans();
			exit;
		}
		t_check_trans();
	}

	#-- handle requests within SIP dialogs
	route(WITHINDLG);

	remove_hf("Route");
	if (is_method("INVITE|UPDATE"))
		record_route();

	#-- account only INVITEs
	if (is_method("INVITE")) {
		$sht(cps=>$ci) = "caps";
		if ($sht(stats=>caps) < ($shtcv(cps=>==caps) / 10)) {
			$sht(stats=>caps) = $shtcv(cps=>==caps) / 10;
		}
	}

	route(SIPOUT);

	#-- requests for my local domains
	if ($rU==$null) {
		# request with no Username in RURI
		sl_send_reply("484","Address Incomplete M1");
		exit;
	}

	#-- check for / handle local requests
	route(HANDLE);

	#-- all out of options
	send_reply("404", "Not Here EOL M2");
}

#-- Per SIP request initial checks
route[REQINIT] {
	if((src_ip!=myself) && ($sht(allowedip=>$si) == $null)) {
		#-- check if already blocked
		if($sht(ipban=>$si)!=$null) {
			xdbg("REQINIT: request from blocked IP - $rm from $fu $si (IP:$si:$sp)\n");
			exit;
		}

#!ifdef WITH_APIBAN
		#-- check if already blocked by apiban
		if($sht(apiban=>$si)!=$null) {
			xlog("L_INFO","[R-REQINIT] Blocking request from apiban.org blocked IP - $rm from $fu $si (IP:$si:$sp)\n");
			route(BLOCKIP);
			exit;
		}
#!endif

		#-- flood detection
		if (!pike_check_req()) {
			route(BLOCKIP);
			exit;
		}
	}

	#-- block and drop requests generated by script kiddies
	if ($ua =~ "(friendly-scanner|sipvicious|sipcli|VaxSIPUserAgent)") {
		xlog("L_INFO","[R-REQINIT] script kiddies from $si IP:$si:$sp\n");
		route(BLOCKIP);
		exit;
	}

	#-- block and drop requests with sql injection
	if($au =~ "(\=)|(\-\-)|(')|(\#)|(\%27)|(\%24)" and $au != $null) {
		xlog("L_INFO","[R-REQINIT] sql injection from $si IP:$si:$sp\n");
		route(BLOCKIP);
		exit;
	}

	#-- check for too many hops
	if (!mf_process_maxfwd_header("10")) {
		xlog("L_INFO","[R-REQINIT] Too Many Hops (IP:$si:$sp)\n");
		sl_send_reply("483","Too Many Hops RI1");
		exit;
	}

	#-- send 200 to any options request to us or from a known ip
	if(is_method("OPTIONS")) {
		if ($sht(allowedip=>$si)!=$null) {
			#-- allow allowed IP on any interface
			sl_send_reply("200","Meow Meow");
			exit;
        } else if ($Rn == "lansock") {
			sl_send_reply("200","Hi local friend");
			exit;
		} else {
			#-- Ignore all other OPTIONS
			exit;
		}
	}

	#-- sanity check
	if(!sanity_check("1511", "7")) {
		xlog("L_INFO","[R-REQINIT] Malformed SIP message from $si:$sp ru = $ru \n");
		exit;
	}
}

#-- Caller NAT detection
route[NATDETECT] {
	if ($Rn == "publicsock") {
		if (nat_uac_test("19")) {
			if (is_method("REGISTER")) {
				fix_nated_register();
			} else {
				if(is_first_hop())
					set_contact_alias();
			}
		}
	}

	return;
}

#-- Wrapper for relaying requests
route[RELAY] {
	xdbg("[R-RELAY] dd $dd nh $nh(d) \n");

	if (is_method("INVITE|BYE|SUBSCRIBE|UPDATE")) {
		if(!t_is_set("branch_route")) t_on_branch("MANAGE_BRANCH");
	}

	if (is_method("INVITE|SUBSCRIBE|UPDATE")) {
		if(!t_is_set("onreply_route")) t_on_reply("MANAGE_REPLY");
	}

	if (is_method("INVITE")) {
		if(!t_is_set("failure_route")) t_on_failure("MANAGE_FAILURE");
	}

	if (!t_relay()) {
		sl_reply_error();
	}

	exit;
}

route[WITHINDLG] {
	if (!has_totag()) return;

	if (loose_route()) {
		if ( is_method("ACK") ) {
			xlog("L_INFO","[R-WITHINDLG] fwd ack statelessly\n");
			#-- ACK is forwarded statelessy
		} else if ( is_method("NOTIFY") ) {
			# Add Record-Route for in-dialog NOTIFY as per RFC 6665.
			record_route();
		}

		route(RELAY);
		exit;
	}

	if ( is_method("ACK") ) {
		if ( t_check_trans() ) {
			#-- no loose-route, but stateful ACK;
			#-- must be an ACK after a 487
			#-- or e.g. 404 from upstream server
			route(RELAY);
			exit;
		} else {
			#-- ACK without matching transaction ... ignore and discard
			exit;
		}
	}

	xlog("L_INFO","[R-WITHINDLG] Sending 404\n");
	sl_send_reply("404","Not here WD1");
	exit;
}

#-- Routing to foreign domains
route[SIPOUT] {
	if (uri==myself) return;

	xlog("L_INFO","[R-SIPOUT] $ru Not for us.\n");
	send_reply("403","Not for here SO1");
	exit;
}

route[HANDLE] {
	xlog("L_INFO","[R-HANDLE] $ru received on $Rn \n");
	if ($si=="FREESWITCHIP") {
        #-- route FreeSWITCH out
        $ru = $_s(sip:$rU@CARRIERIP);
        $fsn = "publicsock";
		route(RELAY);
    } else {
        $ru = $_s(sip:b2bua-$rU@FREESWITCHIP);
		$fsn = "lansock";
		route(RELAY);
	}
}

#-- Manage outgoing branches
branch_route[MANAGE_BRANCH] {
	xdbg("new branch [$T_branch_idx] to $ru\n");
}

#-- Manage incoming replies
onreply_route[MANAGE_REPLY] {
	xdbg("incoming reply\n");
}

#-- Manage failure routing cases
failure_route[MANAGE_FAILURE] {
	xlog("L_INFO","[R-MANAGE_FAILURE] $T_reply_code received. $avp(hello) \n");

	if (t_is_canceled()) {
		exit;
	}

	#-- block call redirect based on 3xx replies.
	if (t_check_status("3[0-9][0-9]")) {
		t_reply("404","Not found MF1");
		exit;
	}
}

#-- Add IP to ipban
route[BLOCKIP] {
	if((src_ip!=myself) && ($sht(allowedip=>$si)==$null)) {
		xlog("L_ALERT","[R-BLOCKIP] blocking $rm from $fu (IP:$si)\n");
		$sht(ipban=>$si) = 1;
#!ifdef WITH_IPTABLESAPI
		http_async_query("http://localhost:8082/addip/$si", "HTTP_REPLY");
#!endif
	}

	return;
}

#-- APIBAN
route[LOADAPIBAN] {
	route(APIBAN);

	if ($var(count) < 249) return;
	
	route(LOADAPIBAN);
}

route[APIBAN] {
#!ifdef WITH_APIBAN
	// check if we already have an APIBAN id... if so, get the updates and
	// if not, get the full list of banned ips.

    // Dont have an APIBAN key?
    // Why not? Its FREE (like beer)
    // https://apiban.org

	// replace MYAPIKEY with your apiban.org API key.
	if (strempty($sel(cfg_get.apiban.key))) {
		xlog("L_INFO","[R-APIBAN] apiban.key not defined.\n");
		return;
	}

	$var(apiget) = "https://apiban.org/api/" + $sel(cfg_get.apiban.key) + "/banned/" + $sht(apibanctl=>ID);
	xlog("L_INFO","[R-APIBAN] Sending API request to $var(apiget)\n");
	http_client_query("$var(apiget)", "$var(banned)");

	// if we dont get a 200 OK from the webserver we will log and exit
	if($rc!=200) {
		xlog("L_INFO","[R-APIBAN] No 200 Received. $var(banned)\n");
		return;
	}

	// lets loop through the ipaddresses we received from our API request
	$var(count) = 0;
	jansson_array_size("ipaddress", $var(banned), "$var(size)");
	while($var(count) < $var(size)) {
		jansson_get("ipaddress[$var(count)]", $var(banned), "$var(blockaddr)");
		// add the blocked ipaddress to the apiban htable and log
		$sht(apiban=>$var(blockaddr)) = 1;
		xlog("L_INFO","[R-APIBAN] ipaddress[$var(count)] == $var(blockaddr)\n");

		$var(count) = $var(count) + 1;
	}

	// lets get our control ID and use it for incremental downloads
	jansson_get("ID", $var(banned), "$var(apiid)");
	xlog("L_INFO","[R-APIBAN] $var(size) addresses added. New APIBAN Control ID: $var(apiid)\n");
	$sht(apibanctl=>ID) = $var(apiid);
    return;
#!endif

    $var(count) = 0;
    return;
}

route[CPS_STATS] {
	$sht(report=>4xx) = ($stat(4xx_transactions) - $sht(report=>4xxoffset));
	$sht(report=>4xxoffset) = $stat(4xx_transactions);
	$sht(report=>5xx) = ($stat(5xx_transactions) - $sht(report=>5xxoffset));
	$sht(report=>5xxoffset) = $stat(5xx_transactions);
	$sht(report=>cancel) = ($stat(rcv_requests_cancel) - $sht(report=>canceloffset));
	$sht(report=>canceloffset) = $stat(rcv_requests_cancel);
	jansson_set("string", "currentcaps", "$sht(stats=>caps)", "$var(statsjson)");
	jansson_set("string", "currentcancels", "$sht(report=>cancel)", "$var(statsjson)");
	jansson_set("string", "current4xx", "$sht(report=>4xx)", "$var(statsjson)");
	jansson_set("string", "current5xx", "$sht(report=>5xx)", "$var(statsjson)");
	$sht(report=>stats) = $var(statsjson);
	xlog("L_INFO","[R-CPS_STATS] $var(statsjson)\n");
}

# curl -d '{"jsonrpc": "2.0", "method": "htable.dump", "params":{"name":"apiban"}, "id":1}' http://127.0.0.1/RPC
event_route[xhttp:request] {
	xlog("L_INFO","[xhttp] -> $hu request received\n");
	if ($hu =~ "^/RPC") {
		jsonrpc_dispatch();
	} else if ($hu =~ "^/stats") {
		xhttp_reply("200", "OK", "application/json",
            "$sht(report=>stats)");
	} else {
        jansson_set("string", "error", "wrong url. try stats. it is a nice one.", "$var(json)");
		xhttp_reply("200", "OK", "application/json",
			"$var(json)");
	}

	return;
}

event_route[htable:mod-init] {
	#-- pre load apiban
	xlog("L_INFO","[R-htable:mod-init] load apiban\n");
	route(LOADAPIBAN);
	xlog("L_INFO","[R-htable:mod-init] pre-load complete\n");

	#-- pre load allowedips
	xlog("L_INFO","[htable:mod-init] add allowed IPs for FreeSWITCH FREESWITCHIP\n");
	$sht(allowedip=>FREESWITCHIP) = 1;

#!ifdef WITH_IPTABLESAPI
	http_client_query("http://localhost:8082/flushchain", "$var(banned)");
#!endif
}

event_route[htable:expired:ipban] {
	xlog("[htable:expired:ipban] record expired $shtrecord(key) => $shtrecord(value)\n");

#!ifdef WITH_IPTABLESAPI
	http_async_query("http://localhost:8082/removeip/$shtrecord(key)", "HTTP_REPLY");
#!endif
}

event_route[core:receive-parse-error] {
 	xlog("L_ALERT", "[CORE:parse]: got a parsing error from $si:$sp, message $mb\n");
	route(BLOCKIP);
	exit;
}

#!ifdef WITH_SIPDUMP
route[TCLEAN] {
	exec_cmd("find /tmp -type f -name kamailio-sipdump-* -mtime +1 -delete &");
}
#!endif

#!ifdef WITH_IPTABLESAPI
route[HTTP_REPLY] {
	if ($http_ok) {
		xlog("L_INFO", "route[HTTP_REPLY]: $http_req_id status: $http_rs\n");
		xlog("L_INFO", "route[HTTP_REPLY]: $http_req_id body: $http_rb\n");
	} else {
		xlog("L_INFO", "route[HTTP_REPLY]: $http_req_id error: $http_err)\n");
	}
}
#!endif